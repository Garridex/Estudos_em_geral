A progamação orientada a objetos surgiu como uma alternativa a essas caracteristicas de progamação estruturada (fluxo continuo de execução do progama). O intuito da sua criação também foi o de aprimorar o manuseio das coisas do mundo real, "objeto" como algo generico que pode representar qualquer coisa tangivel.

Esse paradigma se baseia principalmente em dois conceitos chave: classes e objetos. Todos os outros conceitos, igualmente importantes, são construidos em cima desses dois.

° O que são classes e objetos? -> Imagine que você comprou um carro recentemente e decide modelar esse carro usando progamação orientada a objetos. O seu carro tem as caracteristicas que você estava procurando: um motor 2.0 hibrido, azul escuro, quatro portas, cambio automatico e etc. Ele também possui comportamentos que provavelmente foram o motivo da sua compra, como acelerar, desacelerar, acender os farois e etc. podemos dizer que o carro novo é um objeto, onde suas caracteristicas são seus atributos (dados atrelados ao objeto) e seus comportamentos são suas ações ou métodos.

Seu carro é um objeto seu mas na loja onde você comprou existia vários outros, muito similares, com quatro rodas, volante, cambio, retrovisores e etc. Observe que, apesar do seu carro ser unico (por exemplo, possui um registro único no departamento de transito), podem existir outros com exatamente os mesmos atributos, ou parecidos, ou mesmo totalmente diferentes mas que ainda são considerados carros. Podemos dizer então que seu objeto pode ser classificado (isto é, seu objeto pertence a uma classe) como um carro, e que seu carro nada mais é que uma instancia dessa classe chamada "carro".

Assim, abstraindo um pouco a analogia, uma classe é um conjunto de caracteristicas e comportamentos que definem o conjunto de objetos pertencentes à essa classe.
Repare que a classe em si é um conceito abstrato, como um molde, que se torna concreto e palpável através da criação de um objeto. Chamamos esse criação de instanciação da classe, como se estivessemos usando esse molde (classe) para criar um objeto

Progamar com orientação a objetos é a forma que mais se aproxima do mundo real, um objeto tem propriedades, caracteristicas e comportamentos. Objetos não precisam ser paupaveis, nem sempre são fisicos.

Objeto é uma estrutura de progamação que representa uma entidade uma entidade é a representação de algo no mundo real e que faz algum sentido no sistema.

Cada objeto tem uma unica responsabilidade, mas podendo se relacionar entre si e ter herenças entre eles.

Quando desenvolvemos algo com orientação a objetos não devemos olhar o sistema como um todo mas sim fatiando o sistema e olhar como pequenas partes com relacionamento entre si e no final vão formar o sistema orientado a objetos.

° Para construir objetos, primeiro declaramos uma estrutura, definir que tipo de propriedades e comportamentos o objeto terá. Esse tipo de estrutura chamamos de classe.

° Após a classe, podemos instanciar objetos a partir dessa classe, esse nome instanciar é pois quando criamos um objeto ele fica disponivel por um determinado instante de tempo então quando criamos o objeto dizemos que estamos instanciando uma estrutura, uma classe.

exemplo em php:

<?php
class carro{
public $modelo;
public $cor;
}
?>

Encapsulamento, herança e polimorfismo: as pricipais caracteristicas da POO:
As duas bases são os conceitos de classe e objeto. Desses conceitos derivam alguns outros conceitos extremamente importantes ao paradigma, que não só o definem como são as soluções de alguns problemas da progamação estruturada. Os conceitos em questão são o encapsulamento, a herança, as interfaces e o polimorfismo.

° ENCAPSULAMENTO: Ainda utilizando a analogia do carro, sabemos que ele possui atributos e métodos, ou seja, caracteristicas e comportamentos. Os métodos do carro, como acelerar, podem ser atributos e outros metodos do carro como o tanque de gasolina e o mecanismo de injeção de combustivel, respectivamente, uma vez que acelerar gasta combustivel. No entanto, se alguns desse atributos ou métodos forem facilmente visiveis e modificaveis, como o mecanismo de aceleração do carro, isso pode dar liberdade para que alterações sejam feitas, resultando em efeitos colaterais imprevisiveis. Nessa analogia, uma pessoa pode não estar satisfeita com a aceleração do carro e modifica a forma como ela ocorre, criando efeitos colaterais que podem fazer o carro nem andar, por exemplo.

Dizemos, nesses casos que o metodo de aceleração do seu carro não é visivel por fora do proprio carro. Na poo, um atributo ou metodo que não é visivel de fora do proprio objeto é chamado de "privado" e quando é visivel, é chamado de "público".

Mas então, como sabemos como o nosso carro acelera? É simples: não sabemos. Nós só sabemos. Nós só sabemos que para acelerar, devemos pisar no acelerador e de resto o objeto sabe como executar essa ação sem expor como o faz. Dizemos que a aceleração do carro está encapsulada, pois sabemos o que ele vai fazer ao executarmos esse método, mas não sabemos como - e na verdade, não importa para o progama como o objeto o faz, só que ele o faça.

O Mesmo vale para atributos. Por exemplo: não sabemos como o carro sabe qual velocidade mostrar no velocimetro ou como ele calcula sua velocidade, mas não precisamos saber como isso é feito. Só precisamos saber que ele vai nos dar a velocidade certa. Ler ou alterar um atributo encapsulado pode ser feito a partir de getters e setters (colocar referencia).


__________________________________________________________________________________
para criarmos a estrutura de um objeto primeiro criamos a classe. essa estrutura vai ser composta por atributos que são as caracteristicas e após isso declaramos funções que são os metodos.
Essa é a estrutura base:

<?php
class produto{
    public $descrição; -> atributo
    public $preço; -> atributo
    public function getDetalhes(){ -> isso é um comportamento ou metodo

}
}
° Essa é a estrutura básica de um objeto, atributos e metodos. A partir disso a unica coisa que pode mudar é a quantidade de atributos e metodos mas a estrutura é a mesma.

°Após criarmos uma estrutura, precisamos criar o objeto propriamente dito, um objeto é uma instancia da classe de produto armazenada dentro de uma variavel comum
O código para se criar um objeto e atribuir valores é o seguinte:
$p1 = new produto;
$p1->descrição = 'livro';
$p1->preço = 50;

Com esse código estamos dizendo que p1 é nosso novo objeto e que seus atributos descrição é igual a livro e seu preço é igual a 50.

° Como funciona o metodo do objeto? o metodo é uma função que podemos retornar alguma coisa, nesse caso o metodo nos retornará o nome do produto e o preço

 public function getDetalhes(){
        return("O produto é {$this->descrição} custa {$this->preço}");
}

O $this é a mesma coisa das definições feitas com o p1, porém o this é pra dentro da classe.

Essa função retorna o nome do produto e seu valor com algum texto adicionado por mim. 

° Para acessarmos o metodo basta referenciar a variavel que definimos como objeto e passar o valor do metodo, exemplo:

$p1->getdetalhes();

Trabalhando nesse formato nós temos um grande problema pois os atributos ficam muito sucessitiveis a erros, na verdade não podemos acessar o atributo de fora da classe e atribuir valores direto ao atributo eles devem passar por uma função de Get ou de Set para retornar ou setar informações, isso vai permitir fazer validações e formatações na hora de atribuir ou setar o mesmo.

O atributo public deve ser mudado, por que public significa que pode ser acessado de fora da classe e em qualquer lugar. Temos outros dois tipos de visibilidade além do public: o private que significa que o objeto só pode ser acessado dentro da classe e o protected que é protegido, só pode ser acessado dentro da nossa classe ou classes que herdaram essa classe como principal. 

Alteramos a visibilidade dos atributos para private e o scrip anterior nos retornou um erro, então nesse caso precisamos criar uma função pra setar o valor e passar 